links.qr
x    <- faithful[, 2]
x    <- links.qr$count
#Setup --------
#> Packages  -------------
packagelist.cran <- c('WikipediR',
'WikidataR',
'WikidataQueryServiceR',
'tibble',
'devtools',
'stringr',
'tidytext',
'htmltidy',
'dplyr',
'readr',
'xml2',
'lubridate',
'igraph',
'networkD3',
'dbscan',
'Hmisc')
packagelist.git  <- c('chainsawriot/pediarr',
'mattflor/chorddiag',
'garthtarr/edgebundleR',
'jcheng5/bubbles')
packagelist.git2 <- sapply(stringr::str_split(packagelist.git,pattern = "/"),tail,n=1)
install.packages(packagelist.cran[!(packagelist.cran %in% installed.packages()[,"Package"])])
devtools::install_github  (packagelist.git[!(packagelist.git2%in% installed.packages()[,"Package"])])
sapply(c(packagelist.cran,packagelist.git2), require, character.only = TRUE)
#> Functions ------
initials <- function(x,type="FLast"){
if (type=="FLast"){
gsub("^([A-Za-z]).* ([A-Za-z]*)", "\\1 \\2", x)
}else{
gsub("(.)\\S* *", "\\1", x)
}
}
unspecial <- function(x){
out <- x
for(i in 1:ncol(x)){
out[[i]] <- iconv(x[[i]],to = 'ASCII//TRANSLIT')
if(Hmisc::all.is.numeric(x[[i]])){
out[[i]] <- as.numeric(out[[i]])
}else{
out[[i]] <- as.factor(out[[i]])
}
}
return(as_tibble(out))
}
qid_from_name <- function(name  = 'Thomas Shafee',
limit = 100){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs  <- lapply(name,find_item, limit=limit)
item.qid <- lapply(item.qs,qid_from_name_nest1)
names(item.qid) <- name
item.qid <- unlist(item.qid)
return(item.qid)
}
colMax <- function(x) {if(is.null(dim(x))){x}else{apply(x, 2, max)}}
#> Calculations --------
nucleation.Qs <- c(qid_from_name('Covid-19')[1],
qid_from_name('SARS-CoV-2')[1],
qid_from_name('2019–20 COVID-19 pandemic')[1])
sparql_query  <- paste0('SELECT ?node1 ?node2 ?node1Label ?node2Label ?pdate ?topicLabel ?authorLabel (COUNT(?work) AS ?count)
WHERE {
VALUES ?nucleation_topics { ',paste(paste0('wd:',nucleation.Qs),collapse = " "),' }
?work wdt:P921 ?nucleation_topics, ?node1, ?node2. # Find co-nodes
FILTER   (?node1 != ?node2)                  # Exclude self-links
#  OPTIONAL { ?work wdt:P577 ?pdate. }
#  OPTIONAL { ?work wdt:P50  ?author. }
SERVICE  wikibase:label { bd:serviceParam wikibase:language "en,fr,de,ru,es,zh,jp". }
}
GROUP BY ?node1 ?node2 ?node1Label ?node2Label ?pdate ?topicLabel ?authorLabel
ORDER BY DESC(?count)
LIMIT 10000')
links.qr   <- suppressMessages(unspecial(query_wikidata(sparql_query)))
links.qr$node1Label <- ordered(links.qr$node1Label,         # define factor order by most linked
unique(names(sort(table(links.qr$node1Label),TRUE))))
links.qr   <- links.qr[with(links.qr, order(node1Label)),] # order all by that factor order
links.qr.r <- t(apply(links.qr[,3:4], 1, sort))                 # find reciprocal links and flip them
links.qr   <- links.qr[!duplicated(links.qr.r),]             # remove flipped reciprocal links (now show up as duplicates)
links.qr
x    <- faithful[, 2]
x    <- links.qr$count
x
runApp()
runApp(display.mode = "showcase")
runApp()
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp()
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp()
runApp(display.mode = "showcase")
runApp()
runApp()
runApp(display.mode = "showcase")
??cluster_label_prop
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp()
runApp()
WikidataR::find_item('Thomas Shafee')
output$query_sequence <- renderText({ WikidataR::find_item('Thomas Shafee') })
runApp()
WikidataR::find_item('Thomas Shafee')->x
x
print(WikidataR::find_item('Thomas Shafee'))
cat(WikidataR::find_item('Thomas Shafee'))
class(WikidataR::find_item('Thomas Shafee'))
x[]
x[1]
cat(print(WikidataR::find_item('Thomas Shafee')))
WikidataR::find_item(nucleation.Qs)->x
qid_from_name(list('Rohan Lowe','Thomas Shafee'))
qid_from_name(list('Rohan Lowe','COVID-19'))
qid_from_name(c('Rohan Lowe','COVID-19'))
WikidataR::find_item()
WikidataR::find_item(c('Rohan Lowe','COVID-19'))
WikidataR::find_item(('Rohan Lowe','COVID-19'))
WikidataR::find_item(list('Rohan Lowe','COVID-19'))
cat(print(WikidataR::find_item('Thomas Shafee')))
qid_from_name <- function(name  = 'Thomas Shafee',
limit = 100){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs  <- lapply(name,find_item, limit=limit)
item.qid <- lapply(item.qs,qid_from_name_nest1)
names(item.qid) <- name
item.qid <- unlist(item.qid)
return(item.qid)
}
qid_from_name(list('Rohan Lowe','Thomas Shafee'))
WikidataR::find_item(c('Rohan Lowe','COVID-19'))
qid_from_name(c('Rohan Lowe','COVID-19'))
qid_from_name(list('Rohan Lowe','COVID-19'))
qid_from_name <- function(name  = 'Thomas Shafee',
limit = 100){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs         <- lapply(name,find_item, limit=limit)
item.qid        <- lapply(item.qs,qid_from_name_nest1)
names(item.qid) <- name
item.qid        <- unlist(item.qid)
return(item.qid)
}
qid_from_name(list('Rohan Lowe','COVID-19'))
qid_from_name <- function(name  = 'Thomas Shafee',
limit = 100){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs         <- lapply(name,find_item, limit=limit)
item.qid        <- lapply(item.qs,qid_from_name_nest1)
names(item.qid) <- name
return(item.qid)
}
qid_from_name(list('Rohan Lowe','COVID-19'))
qid_from_name <- function(name  = 'Thomas Shafee',
limit = 100){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs         <- lapply(name,find_item, limit=limit)
item.qid        <- lapply(item.qs,qid_from_name_nest1)
names(item.qid) <- name
return(item.qid)
}
qid_from_name(c('Rohan Lowe','COVID-19'))
qid_from_name <- function(name  = 'Thomas Shafee',
limit = 100){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs         <- lapply(name,find_item, limit=limit)
item.qid        <- lapply(item.qs,qid_from_name_nest1)
names(item.qid) <- name
return(item.qid)
}
qid_from_name(c('Rohan Lowe','COVID-19'))
qid_from_name <- function(name  = 'Thomas Shafee',
limit = 100){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs         <- lapply(name,find_item, limit=limit)
item.qid        <- lapply(item.qs,qid_from_name_nest1)
names(item.qid) <- name
return(item.qid)
}
qid_from_name(c('Rohan Lowe','COVID-19'),limit = 2)
qid_from_name <- function(name  = 'Thomas Shafee',
limit = 100){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs         <- lapply(name,find_item, limit=limit)
item.qid        <- lapply(item.qs,qid_from_name_nest1)
names(item.qid) <- name
return(item.qid)
}
qid_from_name(c('Rohan Lowe','COVID-19'),limit = 2)->x
unlist(x)
lapply(x, '[[')
lapply(x, '[[',1)
qid_from_name <- function(name  = 'Thomas Shafee',
limit = 100){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs         <- lapply(name,find_item, limit=limit)
item.qid        <- lapply(item.qs,qid_from_name_nest1)
names(item.qid) <- name
return(item.qid)
}
qid_from_name(c('Rohan Lowe','COVID-19'),limit = 2)
qid_from_name <- function(name   = 'Thomas Shafee',
limit  = 100,
unlist = TRUE){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs             <- lapply(name,find_item, limit=limit)
item.qid            <- lapply(item.qs,qid_from_name_nest1)
names(item.qid)     <- name
if(unlist){item.qid <- unlist(item.qid)}
return(item.qid)
}
lapply(x, '[[',1)
lapply(qid_from_name(c('Covid-19'),unlist = TRUE), '[[',1)
lapply(qid_from_name(c('Covid-19'),2,unlist = TRUE), '[[',1)
lapply(qid_from_name(c('Covid-19'),2), '[[',1)
qid_from_name <- function(name   = 'Thomas Shafee',
limit  = 100,
unlist = TRUE){
qid_from_name_nest1 <- function(x){lapply(x,"[[","id")}
item.qs             <- lapply(name,find_item, limit=limit)
item.qid            <- lapply(item.qs,qid_from_name_nest1)
names(item.qid)     <- name
if(unlist){item.qid <- unlist(item.qid)}
return(item.qid)
}
lapply(qid_from_name(c('Covid-19'),2), '[[',1)
lapply(qid_from_name(c('Covid-19'),2,unlist = TRUE), '[[',1)
lapply(qid_from_name(c('Covid-19','SARS-CoV-2'),2,unlist = TRUE), '[[',1)
lapply(qid_from_name(c('Covid-19','SARS-CoV-2'),2), '[[',1)
qid_from_name(c('Covid-19','SARS-CoV-2'),2)
lapply(qid_from_name(c('Covid-19','SARS-CoV-2'),2), '[[',1)
lapply(qid_from_name(c('Covid-19','SARS-CoV-2'),2,unlist = FALSE), '[[',1)
qid_from_name(c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),1,unlist = FALSE)
qid_from_name(c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),1,unlist = TRUE)
nucleation.Qs <- qid_from_name(c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),
limit  = 1,
unlist = TRUE)
WikidataR::find_item(nucleation.Qs)
nucleation.Qs <- qid_from_name(c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),
limit  = 1,
unlist = TRUE)
WikidataR::find_item(nucleation.Qs)
lapply(nucleation.Qs,WikidataR::find_item)
print(lapply(nucleation.Qs,WikidataR::find_item))
print(lapply(nucleation.Qs[1],WikidataR::find_item))
runApp()
print(lapply(nucleation.Qs,WikidataR::find_item))
print(lapply(nucleation.Qs,WikidataR::find_item))
cat(print(lapply(nucleation.Qs,WikidataR::find_item)))
cat((lapply(nucleation.Qs,WikidataR::find_item)))
cat(unlist(lapply(nucleation.Qs,WikidataR::find_item)))
cat(print(lapply(nucleation.Qs,WikidataR::find_item)))
class(print(lapply(nucleation.Qs,WikidataR::find_item)))
class(print(sapply(nucleation.Qs,WikidataR::find_item)))
class(print(mapply(nucleation.Qs,WikidataR::find_item)))
class(print(apply(nucleation.Qs,WikidataR::find_item)))
class(print(apply(nucleation.Qs,2,WikidataR::find_item)))
class(print(apply(nucleation.Qs,1,WikidataR::find_item)))
nucleation.Qs
print(nucleation.Qs)
cat(nucleation.Qs)
cat(print(lapply(nucleation.Qs,WikidataR::find_item)))
cat(matrix(lapply(nucleation.Qs,WikidataR::find_item),3))
cat(matrix(lapply(nucleation.Qs,WikidataR::find_item),1))
do.call(lapply(nucleation.Qs,WikidataR::find_item),cat)
class(lapply(nucleation.Qs,WikidataR::find_item))
do.call(lapply(nucleation.Qs,WikidataR::find_item),cat)
do.call(cat,lapply(nucleation.Qs,WikidataR::find_item))
do.call(lapply(nucleation.Qs,WikidataR::find_item),cat)
do.call(cat,lapply(nucleation.Qs,WikidataR::find_item))
do.call(cat,print(lapply(nucleation.Qs,WikidataR::find_item)))
cat(do.call(cat,print(lapply(nucleation.Qs,WikidataR::find_item))))
runApp()
runApp()
unlist(strsplit('text,sasdfsdf,sdf',","))
runApp()
qid_from_name('Q15787')
cat(nucleation.Qs)
runApp()
runApp()
runApp()
print(WikidataR::find_item())
cat(print(lapply(nucleation.Qs,WikidataR::find_item)))
print(lapply(nucleation.Qs,WikidataR::find_item))
class(print(lapply(nucleation.Qs,WikidataR::find_item)))
runApp()
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("charge",
"respulsion between nodes",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
textAreaInput("query",resize="vertical",rows=3,
label       = "Nucleation topic",
value       = "COVID-19",
placeholder = "Search term to start the graph"),
renderPrint("query"),
forceNetworkOutput("force")
)
)
))
runApp()
runApp(display.mode = "showcase")
runApp()
runApp()
print(lapply(nucleation.Qs,WikidataR::find_item))
print(lapply(nucleation.Qs,WikidataR::find_item))
WikidataR::find_item(nucleation.Qs)
WikidataR::find_item(nucleation.Qs[1])
WikidataR::find_item(nucleation.Qs[1])[1]
WikidataR::find_item(nucleation.Qs[1])[[1]]
WikidataR::find_item(nucleation.Qs[1])[[1]]$description
(lapply(nucleation.Qs,WikidataR::find_item))->x
x[[1]]
x[1]
x[1][1]
x[1][[1]]
x[[1]][[1]]
x[[1]][[1]]$id
x[[1]][[1]]$title
x[[1]][[1]]$label
paste(x[[1]][[1]]$label,"(",x[[1]][[1]]$id,")")
paste0(x[[1]][[1]]$label," (",x[[1]][[1]]$id,") - ",x[[1]][[1]]$description)
qdesc <0 function(x){paste0(x[[1]]$label," (",x[[1]]$id,") - ",x[[1]]$description))
paste0(x[[1]][[1]]$label," (",x[[1]][[1]]$id,") - ",x[[1]][[1]]$description)}
qdesc <- function(x){paste0(x[[1]]$label," (",x[[1]]$id,") - ",x[[1]]$description)}
x
lapply(x,qdesc)
unlist(lapply(x,qdesc))
paste(lapply(x,qdesc))
paste(lapply(x,qdesc),collapse = " ")
paste(lapply(x,qdesc),collapse = "\n")
paste(lapply(x,qdesc),sep = "\n")
paste(lapply(x,qdesc),collapse = "\n")
paste(lapply(x,qdesc),collapse = "\n")
?shinyApp()
runApp()
paste(lapply(x,qdesc),collapse = "\n")
cat(paste(lapply(x,qdesc),collapse = "\n"))
runApp()
runApp()
runApp()
switch(1,1=1,2=2,3=5)
switch("1","1"=1,"2"=2,"3"=5)
switch("1","1"="ss","2"=2,"3"=5)
?switch
runApp()
runApp()
qid_from_name(switch(input$rb,
example1 = c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),
example2 = c('defensin', 'protease', 'cyclotide', 'cyclic peptide', 'protein'),
custom   = (unlist(strsplit(input$query,","))
),
limit  = 1,
unlist = TRUE))
qid_from_name(switch("example2",
example1 = c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),
example2 = c('defensin', 'protease', 'cyclotide', 'cyclic peptide', 'protein'),
custom   = (unlist(strsplit(input$query,","))
),
limit  = 1,
unlist = TRUE))
qid_from_name(switch("example2",
example1 = c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),
example2 = c('defensin', 'protease', 'cyclotide', 'cyclic peptide', 'protein'),
custom   = (unlist(strsplit(input$query,","))
)),
limit  = 1,
unlist = TRUE)
runApp()
zqid_from_name(switch(input$rb,
example1 = c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),
example2 = c('defensin', 'protease', 'cyclotide', 'cyclic peptide', 'protein'),
custom   = (unlist(strsplit(input$query,","))
)),
limit  = 1,
unlist = TRUE)
qid_from_name(switch(input$rb,
example1 = c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),
example2 = c('defensin', 'protease', 'cyclotide', 'cyclic peptide', 'protein'),
custom   = (unlist(strsplit(input$query,","))
)),
limit  = 1,
unlist = TRUE)
qid_from_name(switch("example2",
example1 = c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),
example2 = c('defensin', 'protease', 'cyclotide', 'cyclic peptide', 'protein'),
custom   = (unlist(strsplit(input$query,","))
)),
limit  = 1,
unlist = TRUE)
qid_from_name(c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),limit  = 1,unlist = TRUE)
runApp()
runApp()
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Co-topic network from Wikidata"),
wellPanel(
div(class="header",
p("This tool calculates a network of topics.
Each 'node' is a topic, and 'edges' are shown whenever a scientific publication is about both topics.
Thicker edges have more publictions linking both of them"),
p("")
)),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textAreaInput("query",resize="horizontal",rows=1,
label       = "Nucleation topic",
value       = "COVID-19",
placeholder = "Search term to start the graph"),
radioButtons("rb", "Choose one:",
choiceNames = list(
"custom",
"example 1 (Covid-19, SARS-CoV-2, 2019–20 COVID-19 pandemic)",
"example 2 (protein, defensin, protease, cyclic peptide)"
),
choiceValues = list(
"custom", "example1", "example2"
)),
actionButton("button.view", "Calculate network"),
sliderInput("charge",
"node separation",
min = 1,
max = 50,
value = 30)
),
# Show the network
mainPanel(
forceNetworkOutput("force"),
renderText("query")
)
)
))
library(rsconnect)
deployApp()
install.packages(rsconnect)
install.packages('rsconnect')
library(rsconnect)
deployApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library('chainsawriot/pediarr')
library('chainsawriot/pediarr')
runApp()
runApp()
runApp()
?renderForceNetwork
?networkD3
??networkD3
hairColourData <- matrix(c(11975,  1951,  8010, 1013,
5871, 10048, 16145,  990,
8916,  2060,  8090,  940,
2868,  6171,  8045, 6907),
nrow = 4)
chordNetwork(Data = hairColourData,
width = 500,
height = 500,
colourScale = c("#000000",
"#FFDD89",
"#957244",
"#F26223"),
labels = c("red", "brown", "blond", "gray"))
## End(Not run)
runApp()
runApp()
runApp()
runApp()
?sidebarLayout
?wellPanel
?actionButton
?sliderInput
?radioButtons
View(hairColourData)
qid_from_name(switch(input$rb,
example1 = c('Covid-19','SARS-CoV-2','2019–20 COVID-19 pandemic'),
example2 = c('defensin', 'protease', 'cyclotide', 'cyclic peptide', 'protein'),
custom   = (unlist(strsplit(input$query,",")))),
limit  = 1,
unlist = TRUE)
sparql_query  <- paste0('SELECT ?node1 ?node2 ?node1Label ?node2Label ?pdate ?topicLabel ?authorLabel (COUNT(?work) AS ?count)
WHERE {
VALUES ?nucleation_topics { ',paste(paste0('wd:',nucleation.Qs),collapse = " "),' }
?work wdt:P921 ?nucleation_topics, ?node1, ?node2. # Find co-nodes
FILTER   (?node1 != ?node2)                  # Exclude self-links
#  OPTIONAL { ?work wdt:P577 ?pdate. }
#  OPTIONAL { ?work wdt:P50  ?author. }
SERVICE  wikibase:label { bd:serviceParam wikibase:language "en,fr,de,ru,es,zh,jp". }
}
GROUP BY ?node1 ?node2 ?node1Label ?node2Label ?pdate ?topicLabel ?authorLabel
ORDER BY DESC(?count)
LIMIT 10000')
shiny::runApp()
shiny::runApp()
